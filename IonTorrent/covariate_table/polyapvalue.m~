% get polya p value given counts and alpha
function [pval, alt] = polyapvalue(cts, alpha, ref)

% identify top nonref allele. Note, previous germline filtering step garantees that fraction of reference is >= 60%
[cts, sortidx] = sort(cts, 'descend');
alpha = alpha(sortidx);
alleles = 'ACGT';
alt = alleles(sortidx(2));

% depth
d = sum(cts);

pval = 1;
for n1 = (cts(1) + 1):(cts(1) + cts(2))
    n2 = cts(2) - (n1 - cts(1));
    for n3 = 0:(d - n1 - n2)
        n4 = d - n3 - n2 - n1;
        n = [n1 n2 n3 n4];
        posidx = logical(n);
%       note: Minka's Polya is for the emmision case (order specific)
%       we have to multiply by a multinomial coefficient
%       this gets numerically unstable for large counts, 0/0 = NaN, so
%       we're just ignoring those terms, could be problematic.

%       we can use Stirling's approximation for the multinomial coeff, we
%       know that factorial overflows for arguments over 170
        if d > 170
            d_fact = exp(d*log(d) - d);
        else
            d_fact = factorial(d);
        end
        for ni = 1:4
            if n(ni) > 170
                n_fact(ni) = exp(d*log(d) - d);
            else
                d_fact = factorial(d);
            end
        end
        
        try
            multicof = (factorial(d)/prod(factorial(n)));
            assert(~isnan(multicoef))
        catch exception
            multicoef = exp(d*log(d) - d - sum(log(factorial(n(posidx)))));

        term = d*beta(sum(alpha), d)/prod(n(posidx).*beta(alpha(posidx), n(posidx)));
        if ~isnan(term)
            pval = pval - term;
        end
%         try
%             assert(pval <= 1 && pval >= 0);
%         catch exception
%             keyboard
%         end
%         pval = pval + (factorial(d)/prod(factorial(n)))*exp(polya_logProb(alpha, n));
    end
end

end
